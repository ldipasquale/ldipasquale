{"version":3,"sources":["pages/home/styles.module.sass","serviceWorker.js","constants/colors.js","pages/home/backgrounds.js","pages/home/index.js","pages/home/useCamera.js","pages/home/chroma.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","chromaInterval","url","label","colorLabels","Colors","videoRef","useRef","chromaRef","useEffect","video","current","chroma","navigator","mediaDevices","getUserMedia","then","stream","srcObject","addEventListener","width","videoWidth","height","videoHeight","useCamera","useState","isEnabled","handleSetEnabled","backgrounds","backgroundUrl","handleChangeBackgroundUrl","colorValues","handleChangeColorValues","handleToggle","clearInterval","setInterval","context","getContext","drawImage","imageData","getImageData","dataLength","data","length","i","offset","red","green","blue","putImageData","pushChroma","renderColorSlider","colorKey","key","className","cx","styles","colorSetting","Slider","orientation","min","max","value","disabled","onChange","e","container","Switch","toggleButton","checked","content","settings","media","highlightedVideo","ref","autoPlay","style","backgroundImage","Select","id","backgroundSelector","event","target","map","bg","MenuItem","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f35844a1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__3REBG\",\"toggleButton\":\"styles_toggleButton__1kIpT\",\"content\":\"styles_content__nUpfi\",\"settings\":\"styles_settings__3cz4a\",\"colorSetting\":\"styles_colorSetting__NXUdm\",\"redColorSetting\":\"styles_redColorSetting__27PJb\",\"greenColorSetting\":\"styles_greenColorSetting__3_w9m\",\"blueColorSetting\":\"styles_blueColorSetting__2zy40\",\"label\":\"styles_label__13Flj\",\"media\":\"styles_media__2qwFq\",\"chroma\":\"styles_chroma__3BN8D\",\"video\":\"styles_video__33yGn\",\"highlightedVideo\":\"styles_highlightedVideo__357vW\",\"backgroundSelector\":\"styles_backgroundSelector__nG2q9\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export default {\n  RED: 'red',\n  GREEN: 'green',\n  BLUE: 'blue',\n}\n","export default [\n  {\n    url: 'bano.jpg',\n    label: 'Baño',\n  },\n  {\n    url: 'oficina.jpg',\n    label: 'Oficina',\n  },\n]","import React, { useState, useRef } from 'react'\nimport cx from 'classnames'\n\nimport { Slider, Switch, Select, MenuItem } from '@material-ui/core'\n\nimport Colors from 'constants/colors'\n\nimport useCamera from './useCamera'\nimport pushChroma from './chroma'\nimport backgrounds from './backgrounds'\n\nimport styles from './styles.module.sass'\n\nconst colorLabels = {\n  [Colors.RED]: 'Red',\n  [Colors.GREEN]: 'Green',\n  [Colors.BLUE]: 'Blue',\n}\n\nlet chromaInterval\n\nexport default () => { \n  const videoRef = useRef(null)\n  const chromaRef = useRef(null)\n\n  useCamera(videoRef, chromaRef)\n\n  const [isEnabled, handleSetEnabled] = useState(false)\n  const [backgroundUrl, handleChangeBackgroundUrl] = useState(backgrounds[0].url)\n\n  const [colorValues, handleChangeColorValues] = useState({\n    [Colors.RED]: 220,\n    [Colors.GREEN]: 230,\n    [Colors.BLUE]: 130,\n  })\n\n  function handleToggle() {\n    const video = videoRef.current\n    const chroma = chromaRef.current\n\n    if (isEnabled) {\n      clearInterval(chromaInterval)\n\n      return handleSetEnabled(false)\n    }\n\n    chromaInterval = setInterval(() => pushChroma(video, chroma, colorValues), 50)\n\n    return handleSetEnabled(true)\n  }\n\n  function renderColorSlider(colorKey) {\n    return (\n      <div\n        key={colorKey}\n        className={cx([\n          styles.colorSetting,\n          styles[`${colorKey}ColorSetting`],\n        ])}\n      >\n        <div className={styles.label}>{colorLabels[colorKey]}</div>\n\n        <Slider\n          orientation=\"vertical\"\n          min={0}\n          max={255}\n          value={colorValues[colorKey]}\n          disabled={isEnabled}\n          onChange={(e, value) => handleChangeColorValues({\n            ...colorValues,\n            [colorKey]: value,\n          })}\n        />\n      </div>\n    )\n  }\n\n  return (\n    <div className={styles.container}>\n      <Switch\n        className={styles.toggleButton}\n        checked={isEnabled}\n        onChange={() => handleToggle(!isEnabled)}\n      />\n\n      <div className={styles.content}>\n        <div className={styles.settings}>\n          {renderColorSlider(Colors.RED)}\n          {renderColorSlider(Colors.GREEN)}\n          {renderColorSlider(Colors.BLUE)}\n        </div>\n\n        <div className={styles.media}>\n          <video\n            className={cx({\n              [styles.video]: true,\n              [styles.highlightedVideo]: !isEnabled,\n            })}\n            ref={videoRef}\n            autoPlay\n          />\n\n          <canvas\n            className={styles.chroma}\n            style={{\n              backgroundImage: `url(${backgroundUrl})`,\n            }}\n            ref={chromaRef}\n          />\n        </div>\n      </div>\n\n      <Select\n        id=\"backgroundSelector\"\n        className={styles.backgroundSelector}\n        value={backgroundUrl}\n        onChange={event => handleChangeBackgroundUrl(event.target.value)}\n      >\n        {backgrounds.map(bg => (\n          <MenuItem key={bg.url} value={bg.url}>{bg.label}</MenuItem>\n        ))}\n      </Select>\n    </div>\n  )\n}\n","import { useEffect } from 'react'\n\nexport default function useCamera(videoRef, chromaRef) {\n  useEffect(() => {\n    const video = videoRef.current\n    const chroma = chromaRef.current\n\n    navigator.mediaDevices\n      .getUserMedia({ video: true })\n      .then(stream => {\n        video.srcObject = stream\n\n        video.addEventListener('loadeddata', () => {\n          chroma.width = video.videoWidth\n          chroma.height = video.videoHeight\n        })\n      })\n  }, [videoRef, chromaRef])\n}\n","import Colors from 'constants/colors'\n\nexport default function pushChroma(video, chroma, colorValues) {\n  const context = chroma.getContext('2d')\n  const { width, height } = chroma\n\n  context.drawImage(video, 0, 0, width, height)\n\n  const imageData = context.getImageData(0, 0, width, height)\n\n  const dataLength = imageData.data.length / 4\n\n  for (let i = 0; i < dataLength; i++) {\n    const offset = i * 4\n\n    const red = imageData.data[offset + 0]\n    const green = imageData.data[offset + 1]\n    const blue = imageData.data[offset + 2]\n\n     if (\n       (blue < 255 && blue > colorValues[Colors.BLUE]) ||\n       (red < 255 && red > colorValues[Colors.RED]) ||\n       (green < 255 && green > colorValues[Colors.GREEN])\n       // || (red == green && red == blue)\n     ) {\n       imageData.data[offset + 3] = 0\n     }\n  }\n\n  context.putImageData(imageData, 0, 0)\n}\n\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport * as serviceWorker from './serviceWorker'\n\nimport App from './pages'\n\nimport 'stylesheets/vendor/index.sass'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\nserviceWorker.unregister()\n"],"sourceRoot":""}